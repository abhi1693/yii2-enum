{"name":"Yii2 Enum","tagline":"Enumerable Helper","body":"Yii2-Enum\r\n=========\r\n\r\nEnumerable Helper for Yii2\r\n\r\n## Documentation\r\n\r\n### Installation\r\n\r\nThe preferred way to install this extension is through [composer](http://getcomposer.org/download/).\r\n\r\nEither run\r\n```php\r\nphp composer.phar require --prefer-dist abhi1693/yii2-enum \"1.0.0\"\r\n```\r\nor add\r\n```php\r\n\"abhi1693/yii2-enum\": \"1.0.0\"\r\n```\r\nto the require section of your `composer.json` file.\r\n\r\n### Usage\r\n\r\nThe `BaseEnum` class provides support for enumerated types. The class also provides functionality that may be useful in the course of creating and validation enums. To make use of it, you simply create your own class that extends `BaseEnum`:\r\n\r\n```php\r\nuse abhimanyu\\enum\\helpers;\r\n\r\nclass Month extends BaseEnum\r\n{\r\n    const January = 1;\r\n    const February = 2;\r\n    const March = 3;\r\n    const April = 4;\r\n    const May = 5;\r\n    const June = 6;\r\n    const July = 7;\r\n    const August = 8;\r\n    const September = 9;\r\n    const October = 10;\r\n    const November = 11;\r\n    const December = 12;\r\n}\r\n```\r\n\r\nThere are multiple ways to create a new value for an enumerated type:\r\n```php\r\n// static call\r\n$month = Month::May();\r\n\r\n// direct instantiation\r\n$month = new Month(Month::May);\r\n\r\n// by value\r\n$month = Month::createByValue(5);\r\n\r\n// by name\r\n$month = Month::createByName('May');\r\n```\r\n\r\nIt is possible to retrieve the name and value of the instance of the enumerated type:\r\n```php\r\n$name = $month->getName();\r\n$value = $month->getValue();\r\n```\r\n> **NOTE:** If you have multiple class constants defined with the same value, then an array of names will be returned instead of a string for only one. It will be up to you to decide which to use.\r\n\r\nThe class also provides ways of validating names and values:\r\n```php\r\nif (Month::isValidName('May')) {\r\n    // it is valid\r\n}\r\n\r\nif (Month::isValidValue($value)) {\r\n    // it is valid\r\n}\r\n```\r\n\r\nIf you need to retrieve a complete list of possible enum values, you can get them either by name or value:\r\n```php\r\n$constantsByName = Month::getConstantsByName();\r\n\r\necho $constantsByName['May']; // 5\r\n\r\n$constantsByValue = Month::getConstantsByValue();\r\n\r\necho $constantsByValue[5]; // \"May\"\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}